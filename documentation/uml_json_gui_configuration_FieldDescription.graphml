<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yEd 3.12.2-->
  <key for="graphml" id="d0" yfiles.type="resources"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key attr.name="Description" attr.type="string" for="graph" id="d7"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d7"/>
    <node id="n0">
      <data key="d4"/>
      <data key="d6">
        <y:UMLClassNode>
          <y:Geometry height="146.66788990825683" width="237.91319444444457" x="609.6388888888889" y="560.875"/>
          <y:Fill color="#FFCC00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="13" fontStyle="bold" hasBackgroundColor="false" hasLineColor="false" height="19.1328125" modelName="custom" textColor="#000000" visible="true" width="123.99609375" x="56.958550347222285" y="3.0">FieldDescription<y:LabelModel>
              <y:SmartNodeLabelModel distance="4.0"/>
            </y:LabelModel>
            <y:ModelParameter>
              <y:SmartNodeLabelModelParameter labelRatioX="0.0" labelRatioY="0.0" nodeRatioX="0.0" nodeRatioY="-0.03703090122767855" offsetX="0.0" offsetY="0.0" upX="0.0" upY="-1.0"/>
            </y:ModelParameter>
          </y:NodeLabel>
          <y:UML clipContent="true" constraint="" omitDetails="false" stereotype="" use3DEffect="true">
            <y:AttributeLabel>+key : Field
+displayType : DisplayType
+multiline : Boolean
+multichoice : Boolean
+columnFields : Field [0..*] {ordered}
+showSaveInfo : Boolean
+showReferenceValue : Boolean
+handlerName : String</y:AttributeLabel>
            <y:MethodLabel/>
          </y:UML>
        </y:UMLClassNode>
      </data>
    </node>
    <node id="n1">
      <data key="d4"/>
      <data key="d6">
        <y:UMLNoteNode>
          <y:Geometry height="651.3889016309886" width="436.4166666666665" x="411.13541666666697" y="751.75"/>
          <y:Fill color="#FFCC00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="646.5625" modelName="internal" modelPosition="tl" textColor="#000000" visible="true" width="432.671875" x="4.0" y="4.0">key : Field key of the field being inserted into a cell.

displayType : Override for the rendering of this field. Can display
    for example a textfield instead of a dropdown selection.
    Implementation of this is not a priority. Can be null.

multiline : Changes the rendering of input to a textarea in cases
    where this makes sense (like STRING). Exact circumstances
    are yet to be determined (for example does this effect INTEGER).
    Default is false.

multichoice : Should allow the user to select multiple values from
    a dropdown menu or a selection list. Due to the way these need
    to be handled in the code the implementation of this is not of a
    high priority.
    Default is false.

columnFields : Applicaple only to fields that display a table structure
    when they are rendered. This is an array of field keys that defines
    which fields should be used as columns for the table. Order of the
    keys in the array is the order in which the columns appear in the
    table. Should be empty if not needed.

showSaveInfo : At present applies only to components that are
    rendered as a table but it is possible to make implementations
    to all other components as well (although the implementation is
    not of a high priority). Displays savedAt and savedBy information
    that is most reasonable for the situtaion (for table rows this is
    the information of the most recent change within that row).
    Default is false.

showReferenceKey : At present applies only to REFERENCECONTAINER
    but could in theory be implemented for reference fields and select
    fields that use a reference as well (although again implementation
    is of no high priority). Displays the valuePath (or implied value in
    case of REVISIONABLE references) of the reference saved in given
    field.
    Default is false.

handlerName : Specifies a special handler for fields that are rendered
    as a table. This information is needed when the table is rendered
    to allow for correct handling for example when the user clicks a
    row on the table. Values for this attribute are just something the
    user that writes the configuration must know. If ever a GUI is written
    to generate these configurations then it's relatively easy to provide
    the user with a list of selections for different handlers.</y:NodeLabel>
        </y:UMLNoteNode>
      </data>
    </node>
    <node id="n2">
      <data key="d4"/>
      <data key="d6">
        <y:UMLNoteNode>
          <y:Geometry height="303.3833970438325" width="436.4166666666665" x="-30.04166666666609" y="751.75"/>
          <y:Fill color="#FFCC00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="297.34375" modelName="internal" modelPosition="tl" textColor="#000000" visible="true" width="433.41015625" x="4.0" y="4.0">    Example of displayType and multichoice:
These two attributes will most likely not be implemented during this
project. However they have one clear use case that is interesting when
used together. If we have a CONTAINER-field with one subfield of type
SELECTION then it is trivial to see how that CONTAINER could be
shown as displayType SELECTION with multichoice=true instead. This
would change the gui-representation of the field from table to a
dropdown or selection list instead and allow the user to select each
value only once.
This is maybe the most obvious use case for these two attributes
although there are others, like changing a selection from a dropdown
menu to a radiobutton group or changing the CONTAINER with select
field into a checkbox selection instead with radiobutton plus
multichoice.
The important thing to note is that displayType values don't have to be
one to one the same as field type values since there are different
ways of displaying the same type of data to the user but the actual
data definition doesn't need to know about these. For example it might
be smart to implement a new field type MULTISELECT to define those
containers that can only have one subfield that is of type SELECT
but this in itself doesn't yet tell how the data is displayed to the user.</y:NodeLabel>
        </y:UMLNoteNode>
      </data>
    </node>
    <edge id="e0" source="n0" target="n1">
      <data key="d8"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="99.25173611111097" ty="-58.31424356763262"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n2" target="n1">
      <data key="d8"/>
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="11.725974770641983" ty="-174.00275229357806"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d0">
    <y:Resources/>
  </data>
</graphml>
